version: '3.9'

services:
  bot:
    image: "${BOT_IMAGE_NAME:-tg_bot-image}"
    container_name: ${BOT_CONTAINER_NAME}-bot
    stop_signal: SIGINT
    build:
      context: .
    working_dir: "/usr/src/app/"
    volumes:
    - .:/usr/src/app/
    command: python bot.py
    restart: always
    env_file:
      - ".env"
#    networks:
#    - tg_bot
    depends_on:
      - web

  web:
    container_name: ${BOT_CONTAINER_NAME}-web
    build:
      context: .
    working_dir: "/usr/src/app/"
    volumes:
      - .:/usr/src/app/
    command: python manage.py runserver 0.0.0.0:8000
    ports:
      - 8000:8000
    restart: always
#    depends_on:
#      db:
#        condition: service_healthy
    env_file: .env
#    links:
#      - db:db
    networks:
      - djangonetwork

#  db:
#    image: postgres:15.0-alpine
#    volumes:
#      - ./postgres_db/postgres/postgresql-data:/var/lib/postgresql/data
#    healthcheck:
#      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
#      interval: 10s
#      timeout: 10s
#      retries: 10
#    restart: unless-stopped
#    container_name: db
#    networks:
#      - djangonetwork
#    env_file: .env
#    ports:
#      - 5433:5432
#    command:
#      - "postgres"
#      - "-c"
#      - "log_destination=stderr"
#      - "-c"
#      - "logging_collector=on"
#      - "-c"
#      - "log_directory=/var/lib/postgresql/data/pg_log"
#      - "-c"
#      - "work_mem=16MB"
#      - "-c"
#      - "maintenance_work_mem=512MB"

#  adminer:
#    image: adminer
#    restart: always
#    ports:
#      - 8080:8080

networks:
  djangonetwork:
    driver: bridge
#  tg_bot:
#    driver: bridge